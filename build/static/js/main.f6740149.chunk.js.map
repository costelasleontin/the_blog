{"version":3,"sources":["components/Navigation.js","components/Header.js","actions/login.js","components/Newsletter.js","components/Media.js","components/Footer.js","components/Section.js","actions/posts.js","components/Home.js","components/About.js","components/Contact.js","components/NoMatch404.js","actions/users.js","components/AddPost.js","components/Login.js","reducers/counterReducer.js","reducers/filterReducer.js","reducers/postsReducer.js","reducers/usersReducer.js","reducers/loginReducer.js","components/Dashboard.js","components/EditPost.js","routes/Routes.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["Navigation","activeRoute","className","to","connect","state","login","props","onClick","event","preventDefault","dispatch","type","bind","displayDashboard","displayDash","window","location","pathname","redirectHome","Newsletter","placeholder","Media","href","src","alt","Footer","Section","post","post_id","posttitle","username","format","parse","publishdate","postcontent","addAllPosts","allPosts","Home","a","match","Object","keys","params","length","path","id","fetch","method","mode","response","json","then","postsdata","getPosts","error","console","log","posts","isEmpty","ifEmptyPosts","this","map","key","React","Component","counter","filter","Contact","NoMatch404","addAllUsers","allUsers","AddPost","author","message","handleSubmit","handlePostTitleChange","handleAuthorChange","handlePostContentChange","headers","body","JSON","stringify","answer","setState","validator","escape","target","value","isAlphanumeric","trim","split","join","validation","document","getElementById","innerText","text","createTextNode","appendChild","getUsers","index","onSubmit","action","htmlFor","onChange","name","unescape","selected","disabled","users","user","Boolean","rows","Login","password","handleUsernameChange","handlePasswordChange","dashboardredirect","blacklist","matches","renderRedirect","counterstate","defaultFilterState","sort","filterstate","defaultPostsState","postsstate","defaultUsersState","usersstate","Number","loginstate","Dashboard","handleDeletePost","Table","responsive","firstname","lastname","createdate","user_id","EditPost","getPost","postdata","store","createStore","combineReducers","postsReducer","counterReducer","filterReducer","usersReducer","loginReducer","Routes","exact","component","withRouter","About","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f6740149.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Navigation = ({activeRoute})=>(\r\n    <ul className=\"nav nav-tabs\">\r\n        <li className=\"nav-item\">\r\n            <Link className={(activeRoute===\"/home\")?\"nav-link active\":\"nav-link\"} to=\"/home\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n            <Link className={(activeRoute===\"/about\")?\"nav-link active\":\"nav-link\"} to=\"/about\">About US</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n            <Link className={(activeRoute===\"/contact\")?\"nav-link active\":\"nav-link\"} to=\"/contact\">Contact Us</Link>\r\n        </li>\r\n    </ul>);\r\n\r\nexport default Navigation;\r\n\r\n","import React from 'react';\r\nimport { Link , Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {logedout} from '../actions/login.js';\r\n\r\nconst Header = (props) => {\r\n    const handleClick=(event)=>{\r\n        event.preventDefault();\r\n        props.dispatch(logedout());\r\n    }\r\n\r\n    const displayDash = (displayDashboard)=>{\r\n        if(displayDashboard)return(<li className=\"nav-item p-2\"><Link to=\"/dashboard\">Dashboard</Link></li>);\r\n    }\r\n\r\n    const redirectHome=()=>{\r\n        if(props.login===0&&window.location.pathname===\"/dashboard\"){\r\n            return (<Redirect to=\"/login\"/>);\r\n        }\r\n    }\r\n\r\n    return(\r\n    <header>\r\n        <div className=\"container-fluid\">\r\n            {/*Site logo*/}\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-3\">\r\n                </div>\r\n                <div className=\"col-6 text-center\">\r\n                    <Link to=\"/home\">\r\n                        {/*logo here*/}\r\n                        <p className=\"logo\">COSTELOS</p>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"col-3 align-self-end\">\r\n                    <ul className=\"nav justify-content-end\">\r\n                        <li className=\"nav-item p-2\">\r\n                            <Link to=\"/Login\">Sign In</Link>\r\n                        </li>\r\n                        <li className=\"nav-item p-2\">\r\n                            <Link to=\"/\" onClick={handleClick.bind(this)}>Log Out</Link>\r\n                        </li>\r\n                        {displayDash(props.login)}\r\n                        {redirectHome()}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <hr />\r\n    </header>\r\n);}\r\n\r\nconst mapStateToProps=(state)=>({\r\n    login:state.login\r\n});\r\n\r\nexport default connect(mapStateToProps)(Header);","export const logedin=()=>({type:\"LOGIN\"});\r\n\r\nexport const logedout=()=>({type:\"LOGOUT\"});","import React from 'react';\r\n\r\nconst Newsletter = () => (\r\n    <section>\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-md-12 text-center\">\r\n                    <div className=\"title\">\r\n                        <h2>SUBSCRIBE TO NEWSLETTER</h2>\r\n                        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugiat, <br></br> facilis numquam impedit ut sequi. Minus facilis vitae excepturi sit laboriosam.</p>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-md-6 col-md-offset-3\">\r\n                            <div className=\"input-group subscription-form\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Enter Your Email Address\"></input>\r\n                                <span className=\"input-group-btn\">\r\n                                    <button className=\"btn btn-main\" type=\"button\">Subscribe Now!</button>\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n);\r\n\r\nexport default Newsletter;\r\n\r\n","import React, { Fragment } from 'react';\r\n\r\nconst Media = () => (\r\n    <Fragment>\r\n        <section>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"title text-center col-12\">\r\n                    <h2>VIEW US ON INSTAGRAM AND FACEBOOK</h2>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-2 text-center\">\r\n                        <a href=\"notimplemented\">\r\n                            <img className=\"img-fluid presentation rounded\" src=\"/images/30a29764-e7c9-4a0a-afe5-1444122ac9b9category-1.jpg\" alt=\"product\" />\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"col-2 text-center\">\r\n                        <a href=\"notimplemented\">\r\n                            <img className=\"img-fluid presentation rounded\" src=\"/images/30a29764-e7c9-4a0a-afe5-1444122ac9b9category-1.jpg\" alt=\"product\" />\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    </Fragment>\r\n);\r\n\r\nexport default Media;","import React, { Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Footer = () => (\r\n    <Fragment>\r\n        <footer className=\"footer section text-center\">\r\n            <div className=\"container\">\r\n                <ul className=\"nav justify-content-center\">\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link active\" to=\"/contact\">CONTACT</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/TermsOfService\">TERMS OF SERVICE</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/PrivacyPolicy\">PRIVACY POLICY</Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            <p>Powered by Bootstrap</p>\r\n        </footer>\r\n    </Fragment>\r\n);\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Moment from 'react-moment';\r\nimport { Link} from 'react-router-dom';\r\n\r\nconst Section = ({ post } = this.props) => (\r\n    <section>\r\n        <div className=\"container-fluid\">\r\n            <div className=\"title text-center col-12\">\r\n                <Link to={\"/home/\"+ post.post_id}><h2>{post.posttitle}</h2></Link>\r\n            </div>\r\n            <div className=\"row align-items-left\">\r\n                <div className=\"col-2 text-justify p-2\">\r\n                    <p>Author : {post.username}</p>\r\n                </div>\r\n                <div className=\"col-2 text-justify p-2\">\r\n                    <p>Publish Date : <Moment format=\"DD/MM/YYYY HH:mm\" parse=\"YYYY-MM-DD HH:mm\">{post.publishdate}</Moment></p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row align-items-center\">\r\n                <div className=\"col-12 text-justify p-2\">\r\n                    <p>{post.postcontent}</p>\r\n                    {// <button onClick={() => this.props.dispatch(addOne())}>Add One</button> //block for testing counter\r\n                        // <button onClick={() => this.props.dispatch(subtractOne())}>Subtract One</button>\r\n                        // <button onClick={() => this.props.dispatch(resetCounter())}>Reset</button>\r\n                        // <h1>Hola all from = {Number(this.props.counter)}</h1>\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </section>\r\n);\r\n\r\nexport default Section;","export const addAllPosts=(allPosts)=>({type:\"ADDALLPOSTS\",allPosts});\r\n\r\nexport const addPost=(post)=>({type:\"ADDPOST\",post});\r\n\r\nexport const deletePost=(id)=>({type:\"DELETEPOST\",id});\r\n\r\n","import React, { Fragment } from 'react';\r\nimport Navigation from './Navigation';\r\nimport Header from './Header';\r\nimport Newsletter from './Newsletter';\r\nimport Media from './Media';\r\nimport Footer from './Footer';\r\nimport Section from './Section';\r\nimport {connect} from 'react-redux';\r\n//import {addOne,subtractOne,resetCounter} from '../actions/counter.js';\r\nimport {addAllPosts} from '../actions/posts.js';\r\n\r\nclass Home extends React.Component {\r\n    componentDidMount(){\r\n        try{\r\n            const getPosts=async()=>{\r\n                if(this.props.match&&Object.keys(this.props.match.params).length>0){\r\n                    const path=\"/posts/\"+this.props.match.params.id;\r\n                    const response= await fetch(path,{method:'GET',mode:'no-cors'});\r\n                    await response.json().then(postsdata=>{this.props.dispatch(addAllPosts(postsdata))});\r\n                }else{\r\n                    const response = await fetch(\"/posts\",{method:'GET',mode:'no-cors'});\r\n                    await response.json().then(postsdata=>{this.props.dispatch(addAllPosts(postsdata))});\r\n                }\r\n               }\r\n               getPosts();\r\n        }catch (error){\r\n            console.log(error);\r\n        } \r\n    }\r\n\r\n    render() {\r\n        //define function to display Loading message if Posts Array is empty\r\n        const ifEmptyPosts = () => {\r\n            if(this.props.posts.isEmpty)return (<h2>Loading Posts ...</h2>);\r\n        }\r\n        return (\r\n            <Fragment>\r\n                <div>\r\n                    <div className=\"big-section\">\r\n\r\n                        {/*Top Header*/}\r\n                        <Header />\r\n\r\n                        {/* Navigation*/}\r\n                        <Navigation activeRoute=\"/home\" />\r\n\r\n                        {/*Sections*/}\r\n                        {ifEmptyPosts()}\r\n                        {this.props.posts.posts.map(post =><Section key={post.post_id} post={post}/>)}\r\n\r\n                        {/*Media = Instagram and Facebook links*/}\r\n                        <Media />\r\n\r\n                        {/*Newsletter*/}\r\n                        <Newsletter />\r\n\r\n                        {/*Footer*/}\r\n                        <Footer />\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {\r\n        posts:state.posts,\r\n        counter:state.counter,//will use to implement a vizitors counter\r\n        filter:state.filter\r\n    };\r\n};\r\n    \r\n\r\n\r\nexport default connect(mapStateToProps)(Home);","import React, { Fragment } from 'react';\r\nimport Navigation from './Navigation';\r\nimport Header from './Header';\r\nimport Newsletter from './Newsletter';\r\nimport Media from './Media';\r\nimport Footer from './Footer';\r\nimport { connect } from 'react-redux';\r\n\r\nconst About = () => (\r\n    <Fragment>\r\n        <div>\r\n            <div className=\"big-section\">\r\n\r\n                {/*Top Header*/}\r\n                <Header/>\r\n\r\n                {/* Navigation*/}\r\n                <Navigation activeRoute=\"/about\"/>\r\n\r\n                {/*Sections*/}\r\n                <section>\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"title text-center col-md-12\">\r\n                            <h2>About Us</h2>\r\n                        </div>\r\n                        <p className=\"text-justify\">\r\n                            The Costelos Company was founded in 2019 by Costelas Leontin.\r\n                            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Id eu nisl nunc mi ipsum faucibus vitae aliquet. Aliquet sagittis id consectetur purus ut faucibus pulvinar. Ac felis donec et odio pellentesque. Eget egestas purus viverra accumsan. Vestibulum lorem sed risus ultricies tristique nulla aliquet enim tortor. Volutpat commodo sed egestas egestas fringilla phasellus faucibus. Id ornare arcu odio ut sem nulla pharetra. Morbi non arcu risus quis. Sollicitudin ac orci phasellus egestas tellus rutrum. At urna condimentum mattis pellentesque id nibh tortor. Ultrices neque ornare aenean euismod elementum nisi quis eleifend quam. Sit amet volutpat consequat mauris nunc congue. Nunc sed velit dignissim sodales ut eu sem integer vitae. Vulputate dignissim suspendisse in est ante in nibh. Facilisis volutpat est velit egestas dui id ornare arcu. Molestie nunc non blandit massa enim nec dui nunc. Senectus et netus et malesuada fames ac turpis.\r\n                            At lectus urna duis convallis convallis tellus id interdum. Neque convallis a cras semper. Sem nulla pharetra diam sit. Egestas fringilla phasellus faucibus scelerisque eleifend donec pretium vulputate sapien. Neque gravida in fermentum et sollicitudin ac orci. Orci porta non pulvinar neque laoreet suspendisse. Aliquam eleifend mi in nulla posuere sollicitudin. Cras ornare arcu dui vivamus arcu felis bibendum. Molestie a iaculis at erat pellentesque adipiscing commodo elit at. Turpis egestas sed tempus urna. Et netus et malesuada fames ac turpis. Cursus turpis massa tincidunt dui ut ornare. Neque aliquam vestibulum morbi blandit cursus risus at ultrices. Fusce id velit ut tortor. Morbi quis commodo odio aenean sed adipiscing diam donec adipiscing.\r\n                            Neque vitae tempus quam pellentesque nec nam aliquam sem et. Ornare quam viverra orci sagittis eu volutpat odio. Turpis egestas pretium aenean pharetra magna ac placerat. Sit amet consectetur adipiscing elit. Phasellus egestas tellus rutrum tellus pellentesque eu tincidunt. Nisl purus in mollis nunc sed id semper. Sem et tortor consequat id porta nibh venenatis cras. Turpis egestas pretium aenean pharetra. Arcu dui vivamus arcu felis bibendum ut tristique et. Quam viverra orci sagittis eu volutpat odio. Mauris nunc congue nisi vitae. Arcu vitae elementum curabitur vitae nunc sed velit. Vel eros donec ac odio tempor orci dapibus ultrices. Amet mauris commodo quis imperdiet massa tincidunt nunc pulvinar sapien. Sed sed risus pretium quam vulputate dignissim suspendisse. Aliquam ultrices sagittis orci a scelerisque purus semper eget. Posuere lorem ipsum dolor sit amet consectetur adipiscing elit duis. Quam pellentesque nec nam aliquam.\r\n                            Enim ut tellus elementum sagittis vitae et leo. Eu facilisis sed odio morbi quis commodo. Turpis egestas integer eget aliquet nibh praesent tristique. Eu consequat ac felis donec et odio pellentesque diam volutpat. Pharetra pharetra massa massa ultricies mi quis. Quam pellentesque nec nam aliquam sem et. Fermentum et sollicitudin ac orci phasellus. Quis enim lobortis scelerisque fermentum dui faucibus in ornare quam. Ut lectus arcu bibendum at varius vel pharetra vel. Tincidunt tortor aliquam nulla facilisi cras fermentum odio. Euismod lacinia at quis risus sed vulputate odio ut enim. Tellus id interdum velit laoreet id. Phasellus faucibus scelerisque eleifend donec pretium. Accumsan lacus vel facilisis volutpat est velit egestas dui id.\r\n                            Dui id ornare arcu odio ut. Vulputate eu scelerisque felis imperdiet. A erat nam at lectus urna duis convallis convallis tellus. Id consectetur purus ut faucibus pulvinar elementum integer enim. Ac odio tempor orci dapibus. Massa sapien faucibus et molestie ac. Augue eget arcu dictum varius duis at. At risus viverra adipiscing at in tellus integer feugiat scelerisque. Vestibulum sed arcu non odio euismod lacinia. Adipiscing enim eu turpis egestas pretium aenean pharetra. In hac habitasse platea dictumst quisque sagittis purus sit. Semper auctor neque vitae tempus quam pellentesque nec. Tortor at risus viverra adipiscing at in. Pellentesque eu tincidunt tortor aliquam nulla facilisi cras fermentum. Nibh nisl condimentum id venenatis a.\r\n                    </p>\r\n                    </div>\r\n                </section>\r\n\r\n                {/*Media = Instagram and Facebook links*/}\r\n                <Media />\r\n\r\n                {/*Newsletter*/}\r\n                <Newsletter/>\r\n\r\n                {/*Footer*/}\r\n                <Footer/>\r\n            </div>\r\n        </div>\r\n    </Fragment>\r\n);\r\n\r\nconst mapStateToProps=(state)=>({\r\n    login:state.login\r\n});\r\n\r\nexport default connect(mapStateToProps)(About);","import React, { Fragment } from 'react';\r\nimport Navigation from './Navigation';\r\nimport Header from './Header';\r\nimport Newsletter from './Newsletter';\r\nimport Media from './Media';\r\nimport Footer from './Footer';\r\n\r\nconst Contact = () => (\r\n    <Fragment>\r\n        <div>\r\n            <div className=\"big-section\">\r\n\r\n                {/*Top Header*/}\r\n                <Header/>\r\n\r\n                {/* Navigation*/}\r\n                <Navigation activeRoute=\"/contact\"/>\r\n\r\n                {/*Sections*/}\r\n                <section>\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"title text-center col-md-12\">\r\n                            <h2>Contact Us</h2>\r\n                        </div>\r\n                        <p className=\"text-justify\">\r\n                            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Quis varius quam quisque id diam vel quam. Scelerisque purus semper eget duis. Molestie ac feugiat sed lectus. Pulvinar neque laoreet suspendisse interdum consectetur libero. Orci ac auctor augue mauris. Sed pulvinar proin gravida hendrerit. Sit amet mauris commodo quis imperdiet massa tincidunt. Elementum facilisis leo vel fringilla est ullamcorper eget nulla facilisi. Congue nisi vitae suscipit tellus mauris a diam maecenas. Amet purus gravida quis blandit turpis.\r\n                            Enim sit amet venenatis urna. Faucibus pulvinar elementum integer enim neque volutpat ac. Donec massa sapien faucibus et molestie ac feugiat sed lectus. Etiam non quam lacus suspendisse faucibus interdum posuere lorem. Sit amet consectetur adipiscing elit. Vulputate enim nulla aliquet porttitor lacus luctus accumsan. Donec adipiscing tristique risus nec feugiat in. Ut aliquam purus sit amet. Vulputate ut pharetra sit amet. Consequat interdum varius sit amet. Tellus id interdum velit laoreet id. Sed lectus vestibulum mattis ullamcorper velit sed ullamcorper. Eu nisl nunc mi ipsum faucibus. Odio ut sem nulla pharetra diam. Arcu dui vivamus arcu felis bibendum. Vitae semper quis lectus nulla. Habitant morbi tristique senectus et netus et malesuada. Augue ut lectus arcu bibendum at. Habitant morbi tristique senectus et netus et malesuada fames ac.\r\n                            Id neque aliquam vestibulum morbi. Sit amet nulla facilisi morbi tempus iaculis urna id. Tincidunt tortor aliquam nulla facilisi cras. Enim ut tellus elementum sagittis vitae et. Proin nibh nisl condimentum id. Aliquam sem et tortor consequat id porta nibh venenatis. Eu sem integer vitae justo eget magna fermentum. Nunc congue nisi vitae suscipit tellus mauris a diam. Risus feugiat in ante metus dictum at tempor. Vulputate sapien nec sagittis aliquam malesuada bibendum arcu vitae. Placerat duis ultricies lacus sed turpis tincidunt.\r\n                            Cras ornare arcu dui vivamus arcu. Iaculis nunc sed augue lacus viverra vitae congue. In nisl nisi scelerisque eu ultrices vitae auctor. Dui ut ornare lectus sit amet. Mattis vulputate enim nulla aliquet porttitor lacus. Tellus integer feugiat scelerisque varius morbi enim. Viverra vitae congue eu consequat ac felis donec. Phasellus vestibulum lorem sed risus ultricies. Diam donec adipiscing tristique risus nec feugiat. Turpis tincidunt id aliquet risus feugiat in ante metus dictum. Orci ac auctor augue mauris augue.\r\n                            Urna porttitor rhoncus dolor purus non enim. Pulvinar etiam non quam lacus suspendisse faucibus interdum. Congue mauris rhoncus aenean vel. Nibh tortor id aliquet lectus proin nibh nisl condimentum id. Metus aliquam eleifend mi in. Dolor magna eget est lorem ipsum dolor. Amet nisl suscipit adipiscing bibendum est ultricies integer quis. Eget dolor morbi non arcu risus quis varius. Mattis nunc sed blandit libero. At ultrices mi tempus imperdiet nulla. Augue lacus viverra vitae congue eu consequat. Lorem donec massa sapien faucibus et molestie ac.\r\n                        </p>\r\n                    </div>\r\n                </section>\r\n\r\n                {/*Media = Instagram and Facebook links*/}\r\n                <Media />\r\n\r\n                {/*Newsletter*/}\r\n                <Newsletter/>\r\n\r\n                {/*Footer*/}\r\n                <Footer/>\r\n            </div>\r\n        </div>\r\n    </Fragment>\r\n);\r\n\r\nexport default Contact;","import React, { Fragment } from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst NoMatch404 = () => (\r\n    <Fragment>\r\n        <h1>PAGE NOT FOUND</h1>\r\n        <h1>404</h1>\r\n        <h1><Link to=\"/\">GO HOME</Link></h1>\r\n    </Fragment>\r\n);\r\n\r\nexport default NoMatch404;","export const addAllUsers=(allUsers)=>({type:\"ADDALLUSERS\",allUsers});\r\n\r\nexport const addUser=(user)=>({type:\"ADDUSER\",user});\r\n\r\nexport const deleteUser=(id)=>({type:\"DELETEUSER\",id});\r\n","import React, { Fragment } from 'react';\r\nimport Navigation from './Navigation';\r\nimport Header from './Header';\r\nimport Newsletter from './Newsletter';\r\nimport Media from './Media';\r\nimport Footer from './Footer';\r\nimport validator from 'validator';\r\nimport {Link} from 'react-router-dom'; \r\nimport {connect} from 'react-redux';\r\nimport {addAllUsers} from '../actions/users';\r\n\r\nclass AddPost extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            posttitle:'',\r\n            author:'',\r\n            postcontent:'',\r\n            message:''\r\n        }\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n        this.handlePostTitleChange=this.handlePostTitleChange.bind(this);\r\n        this.handleAuthorChange=this.handleAuthorChange.bind(this);\r\n        this.handlePostContentChange=this.handlePostContentChange.bind(this);\r\n    }\r\n\r\n    async handleSubmit(event){\r\n        event.preventDefault();\r\n        try{\r\n            let response= await fetch(\"/posts/add\",{\r\n                method: 'POST',\r\n                // mode: 'no-cors', blocks application/json sending and can debug in development //can be 'cors' on  production if on react app and express api are on same domain for better security\r\n                headers: {\r\n                    'Content-Type':'application/json'\r\n                },\r\n                body:JSON.stringify({\r\n                    posttitle: this.state.posttitle,\r\n                    author: this.state.author,\r\n                    postcontent: this.state.postcontent\r\n                })\r\n            });\r\n            await response.json().then(answer => {\r\n                this.setState({\r\n                message: answer.message,\r\n                posttitle: '',\r\n                postcontent: '',\r\n            });\r\n            if(answer.login&&answer.login===true){\r\n                window.location.href=\"/login\";//this type of reload could be avoided by either using history or by changing some state but the project gets too be time consuming so we need to take shortcuts :P\r\n            }else{/*don't do nothing allow user to insert another post*/ }\r\n        });\r\n        } catch (error) {\r\n            this.setState({message:\"Operation Failed : \"+error.message})\r\n        }\r\n    }\r\n\r\n    handlePostTitleChange(event){\r\n        const posttitle=validator.escape(event.target.value);\r\n\r\n        //for alphanumeric validation\r\n        if (!validator.isAlphanumeric(posttitle.trim().split(\" \").join(\"a\"))&&posttitle.length>1){\r\n            const validation=document.getElementById(\"alphanumericvalidation\");\r\n            validation.innerText=\"\";\r\n            const text=document.createTextNode(\"Please input a title that contains only letters and numbers\");\r\n            validation.appendChild(text);\r\n        }\r\n        else{\r\n            const validation=document.getElementById(\"alphanumericvalidation\");\r\n            validation.innerText=\"\";\r\n            this.setState({posttitle});\r\n        }\r\n\r\n        //empty string validation\r\n        if(validator.isEmpty(posttitle)){\r\n            const validation=document.getElementById(\"emptyvalidation\");\r\n            validation.innerText=\"\";\r\n            const text=document.createTextNode(\"Please input a title that's not empty\");\r\n            validation.appendChild(text);\r\n        }else{\r\n            const validation=document.getElementById(\"emptyvalidation\");\r\n            validation.innerText=\"\";\r\n            this.setState({posttitle});\r\n        }\r\n\r\n        //for max length validation\r\n        if (posttitle.length>250){\r\n            const validation=document.getElementById(\"lengthvalidation\");\r\n            validation.innerText=\"\";\r\n            const text=document.createTextNode(\"The title can contain a maximum of 250 characters\");\r\n            validation.appendChild(text);\r\n        }else{\r\n            const validation=document.getElementById(\"lengthvalidation\");\r\n            validation.innerText=\"\";\r\n            this.setState({posttitle});\r\n        }\r\n    }\r\n\r\n    handleAuthorChange(event){\r\n        const author=validator.escape(event.target.value);\r\n                 //for alphanumeric validation for author\r\n                 if (!validator.isAlphanumeric(author.trim().split(\" \").join(\"a\"))&&author.length>1){\r\n                    const validation=document.getElementById(\"authoralphanumericvalidation\");\r\n                    validation.innerText=\"\";\r\n                    const text=document.createTextNode(\"Please input an author name that contains only letters and numbers\");\r\n                    validation.appendChild(text);\r\n                }else{\r\n                    const validation=document.getElementById(\"authoralphanumericvalidation\");\r\n                    validation.innerText=\"\";\r\n                    this.setState({author});\r\n                }\r\n        \r\n                //empty string validation for author\r\n                if(validator.isEmpty(author)){\r\n                    const validation=document.getElementById(\"authoremptyvalidation\");\r\n                    validation.innerText=\"\";\r\n                    const text=document.createTextNode(\"Please input an author name that's not empty\");\r\n                    validation.appendChild(text);\r\n                }else{\r\n                    const validation=document.getElementById(\"authoremptyvalidation\");\r\n                    validation.innerText=\"\";\r\n                    this.setState({author});\r\n                }\r\n        \r\n                 //for max length validation for author\r\n                 if (author.length>50){\r\n                    const validation=document.getElementById(\"authorlengthvalidation\");\r\n                    validation.innerText=\"\";\r\n                    const text=document.createTextNode(\"The author name can contain a maximum of 50 characters\");\r\n                    validation.appendChild(text);\r\n                }else{\r\n                    const validation=document.getElementById(\"authorlengthvalidation\");\r\n                    validation.innerText=\"\";\r\n                    this.setState({author});\r\n                }\r\n        \r\n    }\r\n\r\n    handlePostContentChange(event){\r\n        const postcontent=validator.escape(event.target.value);\r\n       //empty string validation for postcontent\r\n       if(validator.isEmpty(postcontent)){\r\n           const validation=document.getElementById(\"authoremptyvalidation\");\r\n           validation.innerText=\"\";\r\n           const text=document.createTextNode(\"Please input post content that's not empty\");\r\n           validation.appendChild(text);\r\n       }else{\r\n           const validation=document.getElementById(\"authoremptyvalidation\");\r\n           validation.innerText=\"\";\r\n           this.setState({postcontent});\r\n       }\r\n\r\n        //for max length validation for postcontent\r\n        if (postcontent.length>10000){\r\n           const validation=document.getElementById(\"postcontentlengthvalidation\");\r\n           validation.innerText=\"\";\r\n           const text=document.createTextNode(\"The post content can contain a maximum of 100000 characters\");\r\n           validation.appendChild(text);\r\n       }else{\r\n           const validation=document.getElementById(\"postcontentlengthvalidation\");\r\n           validation.innerText=\"\";\r\n           this.setState({postcontent});\r\n       }\r\n    }\r\n\r\n    componentDidMount(){\r\n        async function getUsers(){\r\n            let response= await fetch(\"/users\",{method:'POST',mode:'no-cors'});\r\n            return await response.json();\r\n        }\r\n        const users = getUsers();\r\n        users.then(postsdata=>{\r\n            if (postsdata.login && postsdata.login === true) {//if browser has valid generated cookie token than it gets users list or if login is set true it redirects you to login page\r\n                window.location.href = \"/login\";\r\n            } else {\r\n                this.props.dispatch(addAllUsers(postsdata));\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let index=0;\r\n        return (\r\n            <Fragment>\r\n                <div>\r\n                    <div className=\"big-section\">\r\n\r\n                        {/*Top Header*/}\r\n                        <Header />\r\n\r\n                        {/* Navigation*/}\r\n                        <Navigation />\r\n\r\n                        {/*Sections*/}\r\n                        <section>\r\n                            <div className=\"container-fluid p-2\">\r\n                                <form method=\"post\" onSubmit={this.handleSubmit} action=\"/posts/add\">\r\n                                    <div className=\"form-row p-2\">\r\n                                        <div className=\"col-12\">\r\n                                            <p className=\"h3 text-center\">Add Post</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-row p-2\">\r\n                                        <div className=\"text-danger validation-summary\">\r\n                                            <ul id=\"validation\">\r\n                                                <li id=\"alphanumericvalidation\"></li>\r\n                                                <li id=\"emptyvalidation\"></li>\r\n                                                <li id=\"lengthvalidation\"></li>\r\n                                                <li id=\"authoralphanumericvalidation\"></li>\r\n                                                <li id=\"authoremptyvalidation\"></li>\r\n                                                <li id=\"authorlengthvalidation\"></li>\r\n                                                <li id=\"postcontentemptyvalidation\"></li>\r\n                                                <li id=\"postcontentlengthvalidation\"></li>\r\n                                            </ul></div>\r\n                                        <div className=\"text-danger message\"><h3>{this.state.message}</h3></div>\r\n                                    </div>\r\n                                    <div className=\"form-row p-2\">\r\n                                        <div className=\"col-12\">\r\n                                            <label htmlFor=\"posttitle\">Post Title:</label><input type=\"text\" onChange={this.handlePostTitleChange} className=\"form-control\" name=\"posttitle\" value={validator.unescape(this.state.posttitle)}></input>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-row p-2\">\r\n                                        <div className=\"col-6\">\r\n                                            <label htmlFor=\"author\">Author:</label>\r\n                                            <select name=\"author\" className=\"form-control\" onChange={this.handleAuthorChange}>\r\n                                                <option selected disabled className=\"text-danger\">Please select author</option>\r\n                                                {this.props.users.users.map(user=>{Boolean(index++);return <option key={index} value={validator.unescape(user.username)}>{validator.unescape(user.username)}</option>})}\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-row p-2\">\r\n                                        <div className=\"col-12\">\r\n                                            <label htmlFor=\"postcontent\">Post Content:</label><textarea rows=\"15\" onChange={this.handlePostContentChange} className=\"form-control\" name=\"postcontent\" value={validator.unescape(this.state.postcontent)}></textarea>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-row p-2\">\r\n                                        <div className=\"col\">\r\n                                            <button type=\"submit\" className=\"btn btn-primary\">Add Post</button>\r\n                                        </div>\r\n                                        <Link className=\"btn btn-primary\" to=\"/dashboard\">Go Back To Dashboard</Link>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </section>\r\n\r\n\r\n                        {/*Media = Instagram and Facebook links*/}\r\n                        <Media />\r\n\r\n                        {/*Newsletter*/}\r\n                        <Newsletter />\r\n\r\n                        {/*Footer*/}\r\n                        <Footer />\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return ({users:state.users});\r\n}\r\n\r\nexport default connect(mapStateToProps)(AddPost);","import React, { Fragment } from 'react';\r\nimport Navigation from './Navigation';\r\nimport Header from './Header';\r\nimport Newsletter from './Newsletter';\r\nimport Media from './Media';\r\nimport Footer from './Footer';\r\nimport validator from 'validator';\r\nimport {logedin} from '../actions/login.js';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect} from 'react-router-dom';\r\n//import {addOne,subtractOne,resetCounter} from '../actions/counter.js';\r\n\r\nclass Login extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            message:'',\r\n            username:'',\r\n            password:''\r\n        }\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n        this.handleUsernameChange=this.handleUsernameChange.bind(this);\r\n        this.handlePasswordChange=this.handlePasswordChange.bind(this);\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        try {\r\n            let response = await fetch(\"/login\", {\r\n                method: 'POST',\r\n                // mode: 'no-cors', // blocks application/json sending and can't debug in development //can be 'cors' on  production if on react app and express api are on same domain for better security\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({\r\n                    username: this.state.username,\r\n                    password: this.state.password,\r\n                })\r\n            });\r\n            await response.json().then(async(answer) => {\r\n                if (answer.dashboardredirect && answer.dashboardredirect === true) {\r\n                    this.setState({ message: answer.message });\r\n                    this.props.dispatch(logedin());\r\n                } else {\r\n                    this.setState({ message: answer.message })\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(\"Operation Failed : \", error);\r\n        }\r\n    }\r\n\r\n    renderRedirect(){\r\n        if(this.props.login){\r\n            return <Redirect to=\"/dashboard\"/>;\r\n        }\r\n    }\r\n\r\n    handleUsernameChange(event) {\r\n        const username = validator.escape(event.target.value);\r\n        //for alphanumeric validation for author\r\n        if (!validator.isAlphanumeric(username.trim().split(\" \").join(\"a\")) && username.length > 1) {\r\n            const validation = document.getElementById(\"usernamealphanumericvalidation\");\r\n            validation.innerText = \"\";\r\n            const text = document.createTextNode(\"Please input an username that contains only letters and numbers\");\r\n            validation.appendChild(text);\r\n        } else {\r\n            const validation = document.getElementById(\"usernamealphanumericvalidation\");\r\n            validation.innerText = \"\";\r\n            this.setState({ username });\r\n        }\r\n\r\n        //empty string validation for author\r\n        if (validator.isEmpty(username)) {\r\n            const validation = document.getElementById(\"usernameemptyvalidation\");\r\n            validation.innerText = \"\";\r\n            const text = document.createTextNode(\"Please input an username that's not empty\");\r\n            validation.appendChild(text);\r\n        } else {\r\n            const validation = document.getElementById(\"usernameemptyvalidation\");\r\n            validation.innerText = \"\";\r\n            this.setState({ username });\r\n        }\r\n\r\n        //for max length validation for author\r\n        if (username.length > 50) {\r\n            const validation = document.getElementById(\"usernamelengthvalidation\");\r\n            validation.innerText = \"\";\r\n            const text = document.createTextNode(\"The username can contain a maximum of 50 characters\");\r\n            validation.appendChild(text);\r\n        } else {\r\n            const validation = document.getElementById(\"usernamelengthvalidation\");\r\n            validation.innerText = \"\";\r\n            this.setState({ username });\r\n        }\r\n    }\r\n\r\n    handlePasswordChange(event) {\r\n        const password = validator.blacklist(event.target.value,'<>/\\'\"');\r\n        //for alphanumeric validation for author\r\n        if (!validator.matches(password.trim(),/^([ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+]*)$/)&& password.length > 0) {\r\n            const validation = document.getElementById(\"passwordalphanumericvalidation\");\r\n            validation.innerText = \"\";\r\n            const text = document.createTextNode(\"Please input an password that contains only letters, numbers and special characters\");\r\n            validation.appendChild(text);\r\n        } else {\r\n            const validation = document.getElementById(\"passwordalphanumericvalidation\");\r\n            validation.innerText = \"\";\r\n            this.setState({ password });\r\n        }\r\n\r\n        //empty string validation for author\r\n        if (validator.isEmpty(password)) {\r\n            const validation = document.getElementById(\"passwordemptyvalidation\");\r\n            validation.innerText = \"\";\r\n            const text = document.createTextNode(\"Please input an password that's not empty\");\r\n            validation.appendChild(text);\r\n        } else {\r\n            const validation = document.getElementById(\"passwordemptyvalidation\");\r\n            validation.innerText = \"\";\r\n            this.setState({ password });\r\n        }\r\n\r\n        //for max length validation for author\r\n        if (password.length > 255) {\r\n            const validation = document.getElementById(\"passwordlengthvalidation\");\r\n            validation.innerText = \"\";\r\n            const text = document.createTextNode(\"The password can contain a maximum of 255 characters\");\r\n            validation.appendChild(text);\r\n        } else {\r\n            const validation = document.getElementById(\"passwordlengthvalidation\");\r\n            validation.innerText = \"\";\r\n            this.setState({ password });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return (\r\n        <Fragment>\r\n        <div>\r\n            <div className=\"big-section\">\r\n\r\n                {/*Top Header*/}\r\n                <Header />\r\n\r\n                {/* Navigation*/}\r\n                <Navigation activeRoute=\"/home\" />\r\n\r\n                {/*Login Section*/}\r\n                <section>\r\n                    <div className=\"container-fluid p-2\">\r\n                        <form method=\"post\" onSubmit={this.handleSubmit}>\r\n                            <div className=\"form-row p-2\">\r\n                                <div className=\"col-12\">\r\n                                    <p className=\"h3 text-center\">{this.state.message}</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-row p-2\">\r\n                                <div className=\"col-3\">\r\n                                    <p className=\"h3 text-center\">Login User</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-row p-2\">\r\n                            <div className=\"text-danger validation-summary\">\r\n                                <ul id=\"validation\">\r\n                                    <li id=\"usernamealphanumericvalidation\"></li>\r\n                                    <li id=\"usernameemptyvalidation\"></li>\r\n                                    <li id=\"usernamelengthvalidation\"></li>\r\n                                    <li id=\"passwordalphanumericvalidation\"></li>\r\n                                    <li id=\"passwordemptyvalidation\"></li>\r\n                                    <li id=\"passwordlengthvalidation\"></li>\r\n                                </ul></div>\r\n                            <div className=\"text-danger message\"><h3>{this.state.message}</h3></div>\r\n                        </div>\r\n                            <div className=\"form-row p-2\">\r\n                                <div className=\"col-3\">\r\n                                    <input type=\"text\" className=\"form-control\" placeholder=\"UserName\" name=\"username\" onChange={this.handleUsernameChange} value={validator.unescape(this.state.username)} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-row p-2\">\r\n                                <div className=\"col-3\">\r\n                                    <input type=\"password\" className=\"form-control\" placeholder=\"Password\" name=\"Password\" onChange={this.handlePasswordChange} value={validator.unescape(this.state.password)} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"form-row p-2\">\r\n                                <div className=\"col\">\r\n                                    <button type=\"submit\" className=\"btn btn-primary\">Log In</button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </section>\r\n\r\n                {/*Redirect to dashboard if logged in */}\r\n                {this.renderRedirect()}\r\n\r\n                {/*Media = Instagram and Facebook links*/}\r\n                <Media />\r\n\r\n                {/*Newsletter*/}\r\n                <Newsletter />\r\n\r\n                {/*Footer*/}\r\n                <Footer />\r\n            </div>\r\n        </div>\r\n    </Fragment>\r\n);}}\r\n    \r\nconst mapStateToProps = (state)=>({login:state.login});\r\n\r\nexport default connect(mapStateToProps)(Login);","\r\n//counter reducer export\r\nexport default (counterstate = 0,action)=>{\r\n    switch (action.type){\r\n        case \"ADD\":\r\n            return counterstate+1;\r\n        case \"SUBTRACT\":\r\n            return counterstate-1;\r\n        case \"RESET\":\r\n            return 0;\r\n        default:\r\n            return counterstate;\r\n    }\r\n}\r\n\r\n","// default store state for filter \r\nconst defaultFilterState={ type: \"text\", sort: \"title\" };\r\n\r\n//filter reducer export\r\nexport default (filterstate = defaultFilterState, action) => {\r\n    switch (action.type) {\r\n        case \"TITLESORT\":\r\n            return { ...filterstate, sort: \"title\" };\r\n        case \"DATESORT\":\r\n            return { ...filterstate, sort: \"date\" };\r\n        case \"AUTHORSORT\":\r\n            return { ...filterstate, sort: \"author\" };\r\n        default:\r\n            return filterstate;\r\n    }\r\n}","// default store state for filter \r\nconst defaultPostsState={ isEmpty: true, posts: [] }; //need to implement error prop to save and display errors from fetching posts\r\n\r\n//filter reducer export\r\nexport default (postsstate = defaultPostsState, action) => {\r\n    switch (action.type) {\r\n        case \"ADDALLPOSTS\":\r\n            return { isEmpty: false, posts:[...action.allPosts] };\r\n        case \"ADDPOST\":\r\n            return { isEmpty: false, posts: [...postsstate.posts, action.post] };\r\n        case \"DELETEPOST\":\r\n                if (postsstate.posts.length === 0) {\r\n                    return { isEmpty: true, posts: [...postsstate.posts].filter(post => post.post_id !== action.id) };\r\n                } else {\r\n                    return { isEmpty: false, posts: [...postsstate.posts].filter(post => post.post_id !== action.id) };\r\n                }\r\n        default:\r\n            return postsstate;\r\n    }\r\n}","// default store state for users \r\nconst defaultUsersState={ isEmpty: true, users: [] };\r\n\r\n//filter reducer export\r\nexport default (usersstate = defaultUsersState, action) => {\r\n    switch (action.type) {\r\n        case \"ADDALLUSERS\":\r\n            return { isEmpty: false, users:[...action.allUsers] };\r\n        case \"ADDPOST\":\r\n            return { isEmpty: false, users: [...usersstate.users, action.user] };\r\n        case \"DELETEPOST\":\r\n            if (Number(action.id)) {\r\n                if (usersstate.users.length === 0) {\r\n                    return { isEmpty: true, users: [...usersstate.users].filter(user => user.id !== action.id) };\r\n                } else {\r\n                    return { isEmpty: false, users: [...usersstate.users].filter(user => user.id !== action.id) };\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            return usersstate;\r\n    }\r\n}","\r\n//login reducer export\r\nexport default (loginstate = 0, action) => {\r\n    switch (action.type) {\r\n        case \"LOGIN\":\r\n            return 1;\r\n        case \"LOGOUT\":\r\n            return 0;\r\n        default:\r\n            return loginstate;\r\n    }\r\n}","import React, { Fragment } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Navigation from './Navigation';\r\nimport Header from './Header';\r\nimport Newsletter from './Newsletter';\r\nimport Media from './Media';\r\nimport Footer from './Footer';\r\nimport {Table} from 'react-bootstrap';\r\nimport {connect} from 'react-redux';\r\nimport Moment from 'react-moment';\r\n//import {addOne,subtractOne,resetCounter} from '../actions/counter.js';\r\nimport {addAllPosts, deletePost} from '../actions/posts.js';\r\nimport {addAllUsers} from '../actions/users.js';\r\n\r\nclass Dashboard extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            message: \"\"\r\n        }\r\n        this.handleDeletePost=this.handleDeletePost.bind(this);\r\n    }\r\n\r\n    async handleDeletePost(event){\r\n        event.preventDefault();\r\n        const post_id = Number(event.target.post_id.value);\r\n        let response= await fetch(\"/deletepost\",{   //could implement try - catch here to catch any fetch errors\r\n            method:\"POST\",\r\n            headers:{\"Content-Type\":\"application/json\"},\r\n            body:JSON.stringify({post_id})\r\n        });\r\n        await response.json().then(answer => {\r\n            if(answer.login&&answer.login===true){\r\n                window.location.href=\"/login\"; //send user to login page if usertoken is invalid or doesn't exists as signaled by api server through login variable\r\n            }else if(answer.login&&answer.login===false){\r\n                this.setState({\r\n                    message: answer.message,\r\n                })\r\n            }else{\r\n                this.setState({\r\n                    message: answer.message,\r\n                })\r\n            }\r\n        });\r\n        this.props.dispatch(deletePost(post_id));\r\n    }\r\n\r\n    componentDidMount(){\r\n        async function getPosts(){\r\n            let response= await fetch(\"/posts\",{method:'GET',mode:'no-cors'});\r\n            return await response.json();\r\n        }\r\n        const posts= getPosts();\r\n        posts.then(postsdata=>{this.props.dispatch(addAllPosts(postsdata))});\r\n        async function getUsers(){\r\n            let response= await fetch(\"/users\",{method:'POST',mode:'no-cors'});\r\n            return await response.json();\r\n        }\r\n        const users= getUsers();\r\n        users.then(postsdata=>{\r\n            if(postsdata.login&&postsdata.login===true){//if browser has valid generated cookie token than it gets users list or if login is set true it redirects you to login page\r\n                window.location.href=\"/login\";          \r\n            }else{\r\n                this.props.dispatch(addAllUsers(postsdata))\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        //define function to display Loading message if Posts Array is empty\r\n        const ifEmptyPosts = () => {\r\n            if(this.props.posts.isEmpty)return (<h2>Loading Posts ...</h2>);\r\n        }\r\n\r\n        let index=0;\r\n\r\n        return (\r\n            <Fragment>\r\n                <div>\r\n                    <div className=\"big-section\">\r\n\r\n                        {/*Top Header*/}\r\n                        <Header />\r\n\r\n                        {/* Navigation*/}\r\n                        <Navigation activeRoute=\"/home\" />\r\n\r\n                        {/*Users Table*/}\r\n                        <h2>Users Table</h2>\r\n                        <Link to=\"/notimplemented\" className='h2 btn btn-primary'>Add New User</Link>\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Username</th>\r\n                                    <th>First Name</th>\r\n                                    <th>Last Name</th>\r\n                                    <th>Account Creation Date</th>\r\n                                    <th>Edit</th>\r\n                                    <th>Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.props.users.users.map(user => (\r\n                                    <tr key={index}>\r\n                                        <td>{index}</td>\r\n                                        <td>{user.username}</td>\r\n                                        <td>{user.firstname}</td>\r\n                                        <td>{user.lastname}</td>\r\n                                        <td><Moment format=\"DD/MM/YYYY HH:mm\" parse=\"YYYY-MM-DD HH:mm\">{user.createdate}</Moment></td>\r\n                                        <td><Link to={\"not implemented\"} className=\"btn btn-sm btn-warning\">Edit</Link></td>\r\n                                    <td>\r\n                                        <form  method=\"post\">\r\n                                            <input type=\"hidden\" name=\"user_id\" value={user.user_id} /> {/* this and also the edit link should also send a user security token to validate operation and will be implemented in the future*/}\r\n                                            <button type=\"submit\" className=\"btn btn-danger btn-sm\">Delete</button>\r\n                                        </form>\r\n                                    </td>\r\n                                        {Boolean(index++)}\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n                        </Table>\r\n\r\n                        {/*Posts Table*/}\r\n                        {ifEmptyPosts()}\r\n                        <h2>Posts Table</h2>\r\n                        <Link to=\"/addpost\" className='h2 btn btn-primary'>Add New Post</Link>\r\n                        <h2>{this.state.message}</h2>\r\n                        <Table responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>#</th>\r\n                                    <th>Post Title</th>\r\n                                    <th>Author</th>\r\n                                    <th>Post Link</th>\r\n                                    <th>Publish Date</th>\r\n                                    <th>Edit</th>\r\n                                    <th>Delete</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                               {this.props.posts.posts.map(post=>(\r\n                                <tr key={post.post_id}>\r\n                                    <td>{post.post_id}</td>\r\n                                    <td>{post.posttitle}</td>\r\n                                    <td>{post.username}</td>\r\n                                    <td><Link to={\"/home/\"+post.post_id}>{\"/home/\"+post.post_id}</Link></td>\r\n                                    <td><Moment format=\"DD/MM/YYYY HH:mm\" parse=\"YYYY-MM-DD HH:mm\">{post.publishdate}</Moment></td>\r\n                                    <td><Link to={\"/editpost/\"+post.post_id} className=\"btn btn-sm btn-warning\">Edit</Link></td>\r\n                                    <td>\r\n                                        <form onSubmit={this.handleDeletePost} method=\"post\">\r\n                                            <input type=\"hidden\" name=\"post_id\" value={post.post_id} /> {/* this and also the edit link should also send a user security token to validate operation and will be implemented when the users login will be setup*/}\r\n                                            <button type=\"submit\" className=\"btn btn-danger btn-sm\">Delete</button>\r\n                                        </form>\r\n                                    </td>\r\n                                </tr>\r\n                               ))}\r\n                            </tbody>\r\n                        </Table>\r\n\r\n                        {/*Media = Instagram and Facebook links*/}\r\n                        <Media />\r\n\r\n                        {/*Newsletter*/}\r\n                        <Newsletter />\r\n\r\n                        {/*Footer*/}\r\n                        <Footer />\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {\r\n        posts:state.posts,\r\n        counter:state.counter,//will use to implement a vizitors counter\r\n        filter:state.filter,\r\n        users:state.users\r\n    };\r\n};\r\n    \r\n\r\n\r\nexport default connect(mapStateToProps)(Dashboard);","import React, { Fragment } from 'react';\r\nimport Navigation from './Navigation';\r\nimport Header from './Header';\r\nimport Newsletter from './Newsletter';\r\nimport Media from './Media';\r\nimport Footer from './Footer';\r\nimport validator from 'validator';\r\nimport { Link } from 'react-router-dom';\r\nimport {addAllUsers} from '../actions/users.js';\r\nimport { connect } from 'react-redux';\r\n\r\nclass EditPost extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            posttitle:'',\r\n            author:'',\r\n            postcontent:'',\r\n            message:''\r\n        }\r\n        this.handleSubmit=this.handleSubmit.bind(this);\r\n        this.handlePostTitleChange=this.handlePostTitleChange.bind(this);\r\n        this.handleAuthorChange=this.handleAuthorChange.bind(this);\r\n        this.handlePostContentChange=this.handlePostContentChange.bind(this);\r\n    }\r\n\r\n    async handleSubmit(event){\r\n        event.preventDefault();\r\n        try{\r\n            let response= await fetch(\"/posts/edit\",{\r\n                method: 'POST',\r\n                // mode: 'no-cors', blocks application/json sending and can debug in development //can be 'cors' on  production if on react app and express api are on same domain for better security\r\n                headers: {\r\n                    'Content-Type':'application/json'\r\n                },\r\n                body:JSON.stringify({\r\n                    post_id:this.state.post_id,\r\n                    posttitle: this.state.posttitle,\r\n                    author: this.state.author,\r\n                    postcontent: this.state.postcontent\r\n                })\r\n            });\r\n            await response.json().then(answer => {this.setState({message: answer.message});\r\n            if(answer.login&&answer.login===true){\r\n                window.location.href=\"/login\";//this type of reload could be avoided by either using history or by changing some state but the project gets too be time consuming so we need to take shortcuts :P\r\n            }else if(answer.dashboardredirect&&answer.dashboardredirect===true){\r\n                window.location.href=\"/dashboard\";\r\n            }else{/*don't do nothing allow user to type valid input*/ }\r\n        });\r\n        } catch (error) {\r\n            console.log(\"Operation Failed : \",error);\r\n        }\r\n    }\r\n\r\n    handlePostTitleChange(event){\r\n        const posttitle=validator.escape(event.target.value);\r\n\r\n        //for alphanumeric validation\r\n        if (!validator.isAlphanumeric(posttitle.trim().split(\" \").join(\"a\"))&&posttitle.length>1){\r\n            const validation=document.getElementById(\"alphanumericvalidation\");\r\n            validation.innerText=\"\";\r\n            const text=document.createTextNode(\"Please input a title that contains only letters and numbers\");\r\n            validation.appendChild(text);\r\n        }\r\n        else{\r\n            const validation=document.getElementById(\"alphanumericvalidation\");\r\n            validation.innerText=\"\";\r\n            this.setState({posttitle});\r\n        }\r\n\r\n        //empty string validation\r\n        if(validator.isEmpty(posttitle)){\r\n            const validation=document.getElementById(\"emptyvalidation\");\r\n            validation.innerText=\"\";\r\n            const text=document.createTextNode(\"Please input a title that's not empty\");\r\n            validation.appendChild(text);\r\n        }else{\r\n            const validation=document.getElementById(\"emptyvalidation\");\r\n            validation.innerText=\"\";\r\n            this.setState({posttitle});\r\n        }\r\n\r\n        //for max length validation\r\n        if (posttitle.length>250){\r\n            const validation=document.getElementById(\"lengthvalidation\");\r\n            validation.innerText=\"\";\r\n            const text=document.createTextNode(\"The title can contain a maximum of 250 characters\");\r\n            validation.appendChild(text);\r\n        }else{\r\n            const validation=document.getElementById(\"lengthvalidation\");\r\n            validation.innerText=\"\";\r\n            this.setState({posttitle});\r\n        }\r\n    }\r\n\r\n    handleAuthorChange(event){\r\n        const author=validator.escape(event.target.value);\r\n                 //for alphanumeric validation for author\r\n                 if (!validator.isAlphanumeric(author.trim().split(\" \").join(\"a\"))&&author.length>1){\r\n                    const validation=document.getElementById(\"authoralphanumericvalidation\");\r\n                    validation.innerText=\"\";\r\n                    const text=document.createTextNode(\"Please input an author name that contains only letters and numbers\");\r\n                    validation.appendChild(text);\r\n                }else{\r\n                    const validation=document.getElementById(\"authoralphanumericvalidation\");\r\n                    validation.innerText=\"\";\r\n                    this.setState({author});\r\n                }\r\n        \r\n                //empty string validation for author\r\n                if(validator.isEmpty(author)){\r\n                    const validation=document.getElementById(\"authoremptyvalidation\");\r\n                    validation.innerText=\"\";\r\n                    const text=document.createTextNode(\"Please input an author name that's not empty\");\r\n                    validation.appendChild(text);\r\n                }else{\r\n                    const validation=document.getElementById(\"authoremptyvalidation\");\r\n                    validation.innerText=\"\";\r\n                    this.setState({author});\r\n                }\r\n        \r\n                 //for max length validation for author\r\n                 if (author.length>50){\r\n                    const validation=document.getElementById(\"authorlengthvalidation\");\r\n                    validation.innerText=\"\";\r\n                    const text=document.createTextNode(\"The author name can contain a maximum of 50 characters\");\r\n                    validation.appendChild(text);\r\n                }else{\r\n                    const validation=document.getElementById(\"authorlengthvalidation\");\r\n                    validation.innerText=\"\";\r\n                    this.setState({author});\r\n                }\r\n        \r\n    }\r\n\r\n    handlePostContentChange(event){\r\n        const postcontent=validator.escape(event.target.value);\r\n       //empty string validation for postcontent\r\n       if(validator.isEmpty(postcontent)){\r\n           const validation=document.getElementById(\"authoremptyvalidation\");\r\n           validation.innerText=\"\";\r\n           const text=document.createTextNode(\"Please input post content that's not empty\");\r\n           validation.appendChild(text);\r\n       }else{\r\n           const validation=document.getElementById(\"authoremptyvalidation\");\r\n           validation.innerText=\"\";\r\n           this.setState({postcontent});\r\n       }\r\n\r\n        //for max length validation for postcontent\r\n        if (postcontent.length>10000){\r\n           const validation=document.getElementById(\"postcontentlengthvalidation\");\r\n           validation.innerText=\"\";\r\n           const text=document.createTextNode(\"The post content can contain a maximum of 100000 characters\");\r\n           validation.appendChild(text);\r\n       }else{\r\n           const validation=document.getElementById(\"postcontentlengthvalidation\");\r\n           validation.innerText=\"\";\r\n           this.setState({postcontent});\r\n       }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const path = `/posts/${this.props.match.params.id}`\r\n        async function getPost() {\r\n            let response = await fetch(path, { method: 'GET' });\r\n            return await response.json();\r\n        }\r\n        const post = getPost();\r\n        post.then(postdata => { this.setState(state => ({ post_id: postdata[0].post_id, posttitle: postdata[0].posttitle, author: postdata[0].username, postcontent: postdata[0].postcontent })) });\r\n        async function getUsers() {\r\n            let response = await fetch(\"/users\", { method: 'POST', mode: 'no-cors' });\r\n            return await response.json();\r\n        }\r\n        const users = getUsers();\r\n        users.then(postsdata => {\r\n            if (postsdata.login && postsdata.login === true) {//if browser has valid generated cookie token than it gets users list or if login is set true it redirects you to login page\r\n                window.location.href = \"/login\";\r\n            } else {\r\n                this.props.dispatch(addAllUsers(postsdata));\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let index=0;\r\n        return (\r\n            <Fragment>\r\n                <div>\r\n                    <div className=\"big-section\">\r\n\r\n                        {/*Top Header*/}\r\n                        <Header />\r\n\r\n                        {/* Navigation*/}\r\n                        <Navigation />\r\n\r\n                        {/*Sections*/}\r\n                        <section>\r\n                            <div className=\"container-fluid p-2\">\r\n                                <form method=\"post\" onSubmit={this.handleSubmit} action=\"/posts/add\">\r\n                                    <div className=\"form-row p-2\">\r\n                                        <div className=\"col-12\">\r\n                                            <p className=\"h3 text-center\">Edit Post</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-row p-2\">\r\n                                        <div className=\"text-danger validation-summary\">\r\n                                            <ul id=\"validation\">\r\n                                                <li id=\"alphanumericvalidation\"></li>\r\n                                                <li id=\"emptyvalidation\"></li>\r\n                                                <li id=\"lengthvalidation\"></li>\r\n                                                <li id=\"authoralphanumericvalidation\"></li>\r\n                                                <li id=\"authoremptyvalidation\"></li>\r\n                                                <li id=\"authorlengthvalidation\"></li>\r\n                                                <li id=\"postcontentemptyvalidation\"></li>\r\n                                                <li id=\"postcontentlengthvalidation\"></li>\r\n                                            </ul></div>\r\n                                        <div className=\"text-danger message\"><h3>{this.state.message}</h3></div>\r\n                                    </div>\r\n                                    <div className=\"form-row p-2\">\r\n                                        <div className=\"col-12\">\r\n                                            <label htmlFor=\"posttitle\">Post Title:</label><input type=\"text\" onChange={this.handlePostTitleChange} className=\"form-control\" name=\"posttitle\" value={validator.unescape(this.state.posttitle)}></input>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-row p-2\">\r\n                                        <div className=\"col-6\">\r\n                                            <label htmlFor=\"author\">Author:</label>\r\n                                            <select name=\"author\" className=\"form-control\" onChange={this.handleAuthorChange}>\r\n                                                {this.props.users.users.map(user => { Boolean(index++); return <option key={index} value={validator.unescape(user.username)}>{validator.unescape(user.username)}</option> })}\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-row p-2\">\r\n                                        <div className=\"col-12\">\r\n                                            <label htmlFor=\"postcontent\">Post Content:</label><textarea rows=\"15\" onChange={this.handlePostContentChange} className=\"form-control\" name=\"postcontent\" value={validator.unescape(this.state.postcontent)}></textarea>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"form-row p-2\">\r\n                                        <div className=\"col\">\r\n                                            <button type=\"submit\" className=\"btn btn-primary\">Update Post</button>\r\n                                        </div>\r\n                                        <Link className=\"btn btn-primary\" to=\"/dashboard\">Go Back To Dashboard</Link>\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </section>\r\n\r\n\r\n                        {/*Media = Instagram and Facebook links*/}\r\n                        <Media />\r\n\r\n                        {/*Newsletter*/}\r\n                        <Newsletter />\r\n\r\n                        {/*Footer*/}\r\n                        <Footer />\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state)=>{\r\n    return {users:state.users};\r\n}\r\n\r\nexport default connect(mapStateToProps)(EditPost);","import React from 'react';\r\nimport {Switch, BrowserRouter, Route, withRouter} from 'react-router-dom';\r\nimport Home from '../components/Home.js';\r\nimport About from '../components/About.js';\r\nimport Contact from '../components/Contact.js';\r\nimport NoMatch404 from '../components/NoMatch404.js';\r\nimport AddPost from '../components/AddPost.js';\r\nimport Login from '../components/Login.js';\r\nimport {Provider} from 'react-redux';\r\nimport configureStore from '../store/configureStore.js';\r\nimport Dashboard from '../components/Dashboard.js';\r\nimport EditPost from '../components/EditPost.js';\r\n\r\nconst store=configureStore();\r\n\r\n\r\nconst Routes = () => (\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact={true} path=\"/\">\r\n                    <Home />\r\n                </Route>\r\n                <Route path=\"/home/:id\" component={withRouter(Home)} />\r\n                <Route path=\"/home\" component={withRouter(Home)} />\r\n                <Route path=\"/about\" component={About} />\r\n                <Route path=\"/contact\" component={Contact} />\r\n                <Route path=\"/login\" component={Login} />\r\n                <Route path=\"/addpost\" component={AddPost} />\r\n                <Route path=\"/editpost/:id\" component={EditPost} />\r\n                <Route path=\"/dashboard\" component={Dashboard} />\r\n                <Route component={NoMatch404} />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    </Provider>\r\n);\r\n\r\nexport default Routes;","import {createStore, combineReducers} from 'redux';\r\nimport counterReducer from '../reducers/counterReducer';\r\nimport filterReducer from '../reducers/filterReducer';\r\nimport postsReducer from '../reducers/postsReducer';\r\nimport usersReducer from '../reducers/usersReducer';\r\nimport loginReducer from '../reducers/loginReducer';\r\n\r\nexport default ()=>{\r\n    const store = createStore(combineReducers(\r\n        {\r\n            posts:postsReducer,\r\n            counter:counterReducer,\r\n            filter:filterReducer,\r\n            users:usersReducer,\r\n            login:loginReducer\r\n        }\r\n    ));\r\n    return store;\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport Routes from './routes/Routes.js';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<Routes/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}